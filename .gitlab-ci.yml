variables:
  TOKEN: glpat-KsYf7TvqyZeFC87GZ5eX
  CA_CERTIFICATE: "$CA_CERTIFICATE"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: tcp://docker:2375
  OP_API_TOKEN: $OP_API_TOKEN
  OP_TESTING_VAULT_ID: $OP_TESTING_VAULT_ID
  OP_CONNECT_API_CREDENTIALS: $OP_CONNECT_API_CREDENTIALS
  OP_SERVER_URL: http://docker:8080
  OP_CREDENTIALS_JSON: /builds/product-research-and-development/devop/aws/automation/1password/connect-1password/.1password-credentials.json
  NIGHTLY_TOOLCHAIN: nightly-2024-02-22-x86_64-unknown-linux-gnu

default:
  before_script:
    - rustup component add rustfmt
  services:
    - name: docker:dind
      alias: docker
      entrypoint: ["env", "-u", "DOCKER_HOST"]
      command:
        - /bin/sh
        - -c
        - echo "$CA_CERTIFICATE" > /usr/local/share/ca-certificates/my-ca.crt && update-ca-certificates && dockerd-entrypoint.sh || exit


stages:             # List of stages for jobs, and their order of execution
  - test
  - linting
  - build
  - deploy

build-debug:        # This job runs in the build stage, which runs first.
  stage: build
  tags:
    - quick
  script:
    - echo "Compiling the code..."
    - cargo build

build-release:
  stage: build
  script:
    - echo "Compiling the code..."
    - cargo build --release

tests:              # This job runs in the test stage.
  image: registry.gitlab.intranet:5050/product-research-and-development/devop/aws/automation/base-images/docker-image:master
  stage: test
  tags:
    - tests
  before_script:
    - export OP_API_TOKEN=$OP_API_TOKEN
    - export OP_TESTING_VAULT_ID=$OP_TESTING_VAULT_ID
    - export OP_SERVER_URL=$OP_SERVER_URL
    - export OP_CONNECT_API_CREDENTIALS=$OP_CONNECT_API_CREDENTIALS
    - 'echo "Current dir: `pwd`"'
    - echo "Creating $OP_CREDENTIALS_JSON"
    - touch $OP_CREDENTIALS_JSON
    - ls -la ~/
    - echo $OP_CONNECT_API_CREDENTIALS > $OP_CREDENTIALS_JSON
    - cat $OP_CREDENTIALS_JSON
    - docker --version || echo 'Docker CLI not found'
    - echo "Installing docker-compose"
    - curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    - chmod +x /usr/local/bin/docker-compose
    - echo "Instaling rustup..."
    - curl https://sh.rustup.rs -sSf | sh -s -- -y
    - . "$HOME/.cargo/env"
    - rustup override set stable
  script:
    - /usr/local/bin/docker-compose up
    - sleep 10
    - 'curl -H "Accept: application/json" -H "Authorization: Bearer $OP_API_TOKEN" $OP_SERVER_URL/v1/vaults'
    - echo "Running unit tests..."
    - cargo t
    - echo "Running doc tests..."
    - cargo t --doc

formatting:
  stage: linting
  tags:
    - linting
  script:
    - echo "Compiling debug build..."
    - cargo build --verbose
    - echo "Linting code..."
    - cargo fmt -- --check

clippy:
  stage: linting
  tags:
    - linting
  script:
    - rustup install $NIGHTLY_TOOLCHAIN
    - rustup component add clippy --toolchain $NIGHTLY_TOOLCHAIN
    - echo "Checking clippy offenses..."
    - cargo clippy --all -- -D warnings

# deploy-job:      # This job runs in the deploy stage.
#   stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#   environment: production
#   script:
#     - echo "Deploying application..."
#     - echo "Application successfully deployed."
